<h1>Sessions#new</h1>
<p>Find me in app/views/sessions/new.html.erb</p>

<!-- Script for logon using Google account - begin -->
<script src="https://apis.google.com/js/platform.js" async defer></script>

<meta name="google-signin-client_id" content="801118970389-nj4elevvk0vqnqh7iigu0957e97k4msj.apps.googleusercontent.com">
<meta name="google-signin-scope" content="profile email">

<script>
  function onSignIn(googleUser) {
    // Useful data for your client-side scripts:
    var profile = googleUser.getBasicProfile();
    console.log("ID: " + profile.getId()); // Don't send this directly to your server!
    console.log('Full Name: ' + profile.getName());
    console.log('Given Name: ' + profile.getGivenName());
    console.log('Family Name: ' + profile.getFamilyName());
    console.log("Image URL: " + profile.getImageUrl());
    console.log("Email: " + profile.getEmail());


    // The ID token you need to pass to your backend:
    var id_token = googleUser.getAuthResponse().id_token;
    console.log("ID Token: " + id_token);

  };
</script>

<!-- Script for logon using Google account - end -->



<!-- Script for logon using Facebook account - begin -->

<script>

  // Now that we've initialized the JavaScript SDK, we call
  // FB.getLoginStatus().  This function gets the state of the
  // person visiting this page and can return one of three states to
  // the callback you provide.  They can be:
  //
  // 1. Logged into your app ('connected')
  // 2. Logged into Facebook, but not your app ('not_authorized')
  // 3. Not logged into Facebook and can't tell if they are logged into
  //    your app or not.
  //
  // These three cases are handled in the callback function.
  window.fbAsyncInit = function() {
    FB.init({
      appId      : '1788772401370766', // FB client ID
      xfbml      : true,
      version    : 'v2.7'
    });

    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  };

  (function(d, s, id){
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) {return;}
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      testAPI();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('status').innerHTML = 'Please log ' +
          'into this app.';
      alert(status);
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Please log ' +
          'into Facebook.';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }

  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
      document.getElementById('status').innerHTML =
          'Thanks for logging in, ' + response.name + '!';
    });
  }

  function fbLogoutUser() {
    FB.getLoginStatus(function(response) {
      if (response && response.status === 'connected') {
        FB.logout(function(response) {
          document.location.reload();
          console.log('Successful logout');
        });
      }
    });
  }

</script>
<!-- Script for logon using Facebook account - end -->


<div color="red"><%= flash[:notice] %></div>
<% provide(:title, "Log in") %>
<h1>Log in</h1>

<div class="row">
  <div class="col-md-6 col-md-offset-3">
    <%= form_for(:session, url: login_path) do |f| %>

        <%= f.label :email %>
        <%= f.email_field :email, class: 'form-control' %>

        <%= f.label :password %>
        <%= f.password_field :password, class: 'form-control' %>

        <%= f.submit "Log in", class: "btn btn-primary" %>
    <% end %>

    <a class="btn btn-sm btn-white btn-block" href="users/new.html">Register</a>


    <!-- Html for logon using Google account - begin -->
    <!-- the next two Google-SignIn button are same. Please choose one and delete another.  -->
    <div class="g-signin2" data-onsuccess="onSignIn"></div><br>
    <div class="g-signin2" data-onsuccess="onSignIn" data-theme="dark"></div>
    <!-- -->

    <a href="/" onclick="signOut();">Sign out</a>
    <script>
      function signOut() {
        var auth2 = gapi.auth2.getAuthInstance();
        auth2.signOut().then(function () {
          console.log('User signed out.');

        });
      }
    </script>
    <!-- Html for logon using Google account - end -->
  </div>
</div>

<!-- Html for logon using Facebook account - begin -->

<!--
  Below we include the Login Button social plugin. This button uses
  the JavaScript SDK to present a graphical Login button that triggers
  the FB.login() function when clicked.
-->

<fb:login-button scope="public_profile,email" onlogin="checkLoginState();" autologoutlink="true">
</fb:login-button>



<div id="status">
</div>

<!-- Html for logon using Facebook account - end -->